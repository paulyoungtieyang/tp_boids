//****************************************************************************
//
//
//
//****************************************************************************



#ifndef __AREA_H__
#define __AREA_H__


// ===========================================================================
//                                  Libraries
// ===========================================================================
#include <cstdio>
#include <cstdlib>



// ===========================================================================
//                                Project Files
// ===========================================================================
#include "Predator.h"
#include "Prey.h"

// ===========================================================================
//                              Class declarations
// ===========================================================================






class Area
{
  public :
    
    // =======================================================================
    //                                 Enums
    // =======================================================================
    
    // =======================================================================
    //                               Constructors
    // =======================================================================
    Area(void);
    Area(int H, int W, int Nb_prey, int Nb_pred, double step);
    Area(int H, int W, int Nb_prey, Prey* tab_prey, int Nb_pred, double step);
    // =======================================================================
    //                                Destructor
    // =======================================================================
    virtual ~Area(void);

    // =======================================================================
    //                            Accessors: getters
    // =======================================================================
    inline double get_Step (void);
    inline int get_Height (void);
    inline int get_Width (void);
    inline void Display(void);

    // =======================================================================
    //                            Accessors: setters
    // =======================================================================

    // =======================================================================
    //                                Operators
    // =======================================================================

    // =======================================================================
    //                              Public Methods
    // =======================================================================
    int Get_K (int index);
    int Get_K_Prime (int index);

    Vect Speed_1 (int index);
    Vect Speed_2 (int index);
    Vect Speed_3 (int index);

    Vect Speed_All (int index);
    Vect Pos_All (int index);

    void Update_Pos (int index);
    void Update_Speed (int index);
    // =======================================================================
    //                             Public Attributes
    // =======================================================================





  protected :

    // =======================================================================
    //                            Forbidden Constructors
    // =======================================================================
    /*Area(void)
    {
      printf("%s:%d: error: call to forbidden constructor.\n", __FILE__, __LINE__);
      exit(EXIT_FAILURE);
    };*/
    Area(const Area &model)
    {
      printf("%s:%d: error: call to forbidden constructor.\n", __FILE__, __LINE__);
      exit(EXIT_FAILURE);
    };


    // =======================================================================
    //                              Protected Methods
    // =======================================================================

    // =======================================================================
    //                             Protected Attributes
    // =======================================================================
    int Width;
    int Height;

    double TIME_STEP;

    int Nb_Prey;
    int Nb_Predator;

    Prey* tab_Prey;
    Predator* tab_Predator;

    

    

};


// ===========================================================================
//                              Getters' definitions
// ===========================================================================

// ===========================================================================
//                              Setters' definitions
// ===========================================================================

// ===========================================================================
//                             Operators' definitions
// ===========================================================================
inline double Area::get_Step (void) {
    return TIME_STEP;
}

inline int Area::get_Height (void) {
    return Height;
}

inline int Area::get_Width (void) {
    return Width;
}

inline void Area::Display(void) {
    printf("Width = %d , Height = %d , TIME_STEP= %lf , Nb_Predator = %d, Nb_Prey = %d \n", Width, Height, TIME_STEP, Nb_Predator, Nb_Prey );
}

/*inline void Area::Get_Prey(void) {
}*/

// ===========================================================================
//                          Inline functions' definition
// ===========================================================================


#endif // __AREA_H__

